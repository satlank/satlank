if v:progname == 'vi'
	set noloadplugins
endif

let mapleader="\<Space>"
let maplocalleader="\\"

" Extension -> filetype mappings.
let filetype_m='objc'
let filetype_pl='prolog'

if has('gui')
  " Turn off scrollbars. (Default on macOS is "egmrL").
  set guioptions-=L
  set guioptions-=R
  set guioptions-=b
  set guioptions-=l
  set guioptions-=r
endif

" Improve responsiveness for async plugins, the default is 4000ms
set updatetime=100

" Allow local additions
let s:vimrc_local=$XDG_CONFIG_DIR . '/vim/vimrc.local'
if filereadable(s:vimrc_local)
	execute 'source ' . s:vimrc_local
endif

" put netrwhist into XDG directory instead of the first directory in the runtime
" path
let g:netrw_home=$XDG_DATA_HOME . '/vim'

if &loadplugins
	if has('packages')
		packadd! base16-vim

		packadd! rust.vim
		packadd! dart-vim-plugin
		packadd! vim-terraform

		packadd! copilot.vim

		if has('nvim')
			packadd! nvim-lspconfig
			packadd! cmp-nvim-lsp
			packadd! nvim-cmp
			packadd! rust-tools.nvim
			packadd! plenary.nvim
			packadd! telescope.nvim
			packadd! obsidian.nvim
			packadd! true-zen.nvim
			lua << EOF
local truezen = require("true-zen")
truezen.setup({
	modes = {
		ataraxis = {
			padding = { left = 100, right = 100, top = 0, bottom = 0 },
			minimum_writing_area = { height = 25, width = 80 },
		},
	},
})

local cmp = require("cmp")
cmp.setup({
	snippet = {
		expand = function(args)
			vim.fn["vsnip#anonymous"](args.body)
		end,
	},
	window = {
	},
	mapping = cmp.mapping.preset.insert({
		["<C-b>"] = cmp.mapping.scroll_docs(-4),
		["<C-f>"] = cmp.mapping.scroll_docs(4),
		["<C-Space>"] = cmp.mapping.complete(),
		["<C-e>"] = cmp.mapping.abort(),
		["<CR>"] = cmp.mapping.confirm({
			select = true,
		}),
	
	}),
	sources = {
		{ name = "nvim_lsp" },
		{ name = "vsnip" },
	},
})

local capabilities = require('cmp_nvim_lsp').default_capabilities()

require'lspconfig'.pylsp.setup{
	capabilities = capabilities,
}


local obsidian = require("obsidian")
obsidian.setup({
	workspaces = {
		{
			name = "vault",
			path = "~/srk/notes/",
		},
	},
	daily_notes = {
		folder = "daily/",
		-- Match Obsidian date format of, e.g. "2021-08-01_Sun"
		date_format = "%Y-%m-%d_%a",
		template = "assets/templates/daily.md",
	},
	completion = {
		nvim_cmp = true,
		min_chars = 2,
	},
	templates = {
		subdir = "assets/templates/",
	},
	picker = {
		name = "telescope.nvim",
	},
	ui = {
		enable = false,
	},
	disable_frontmatter = true,
	note_id_func = function(title)
		-- Match the ZK Obsidian plugin's note ID format of, e.g. "20210801123456"
		local prefix = os.date("%Y%m%d%H%M%S")
		if title ~= nil and title ~= "" then
			return prefix .. " " .. title
		else
			return prefix
		end
	end,
})
local rt = require("rust-tools")

rt.setup({
	server = {
		settings = {
			["rust-analyzer"] = {
				inlayHints = { locationLinks = false }
			}
		}
	},
	on_attach = function(_, bufnr)
		-- Hover actions
		vim.keymap.set("n", "<C-space>", rt.hover_actions.hover_actions, { buffer = bufnr })
		-- Code action groups
		vim.keymap.set("n", "<Leader>a", rt.code_action_group.code_action_group, { buffer = bufnr })
	end,
})
EOF
		endif

		let g:signify_sign_show_count        = 0
		packadd! vim-signify

	endif
endif

" After this file is sourced, plugin code will be evaluated.
" Automatic, language-dependent indentation, syntax coloring and other
" functionality.
"
" Must come *after* the `:packadd!` calls above otherwise the contents of
" package "ftdetect" directories won't be evaluated.
filetype indent plugin on
syntax on

" See ~/.vim/after for files evaluated after that.
" See `:scriptnames` for a list of all scripts, in evaluation order.
" Launch Vim with `vim --startuptime vim.log` for profiling info.
"
" To see all leader mappings, including those from plugins:
"
"   vim -c 'set t_te=' -c 'set t_ti=' -c 'map <space>' -c q | sort
